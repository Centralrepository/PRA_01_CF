/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.UserOTPRegistration;
import com.crowd.funding.database.model.UserOTPRegistrationModel;
import com.crowd.funding.database.model.UserOTPRegistrationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the UserOTPRegistration service. Represents a row in the &quot;cf_user_otp_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link UserOTPRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserOTPRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserOTPRegistrationImpl
 * @see UserOTPRegistration
 * @see UserOTPRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class UserOTPRegistrationModelImpl extends BaseModelImpl<UserOTPRegistration>
	implements UserOTPRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user otp registration model instance should use the {@link UserOTPRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_user_otp_details";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "USER_OTP_ID", Types.BIGINT },
			{ "MOBILE_NO", Types.BIGINT },
			{ "MAIL_ADDRESS", Types.VARCHAR },
			{ "OTP", Types.INTEGER },
			{ "MAIL_VERIFICATION", Types.INTEGER },
			{ "SMS_VERIFICATION", Types.INTEGER },
			{ "CREATION_DATE_TIME", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("USER_OTP_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("MOBILE_NO", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("MAIL_ADDRESS", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("OTP", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("MAIL_VERIFICATION", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("SMS_VERIFICATION", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("CREATION_DATE_TIME", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_user_otp_details (uuid_ VARCHAR(75) null,USER_OTP_ID LONG not null primary key,MOBILE_NO LONG,MAIL_ADDRESS VARCHAR(75) null,OTP INTEGER,MAIL_VERIFICATION INTEGER,SMS_VERIFICATION INTEGER,CREATION_DATE_TIME DATE null)";
	public static final String TABLE_SQL_DROP = "drop table cf_user_otp_details";
	public static final String ORDER_BY_JPQL = " ORDER BY userOTPRegistration.USER_OTP_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_user_otp_details.USER_OTP_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.UserOTPRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.UserOTPRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.UserOTPRegistration"),
			true);
	public static final long MOBILE_NO_COLUMN_BITMASK = 1L;
	public static final long USER_OTP_ID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static UserOTPRegistration toModel(UserOTPRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		UserOTPRegistration model = new UserOTPRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setUSER_OTP_ID(soapModel.getUSER_OTP_ID());
		model.setMOBILE_NO(soapModel.getMOBILE_NO());
		model.setMAIL_ADDRESS(soapModel.getMAIL_ADDRESS());
		model.setOTP(soapModel.getOTP());
		model.setMAIL_VERIFICATION(soapModel.getMAIL_VERIFICATION());
		model.setSMS_VERIFICATION(soapModel.getSMS_VERIFICATION());
		model.setCREATION_DATE_TIME(soapModel.getCREATION_DATE_TIME());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<UserOTPRegistration> toModels(
		UserOTPRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<UserOTPRegistration> models = new ArrayList<UserOTPRegistration>(soapModels.length);

		for (UserOTPRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.UserOTPRegistration"));

	public UserOTPRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _USER_OTP_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUSER_OTP_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _USER_OTP_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserOTPRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return UserOTPRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("USER_OTP_ID", getUSER_OTP_ID());
		attributes.put("MOBILE_NO", getMOBILE_NO());
		attributes.put("MAIL_ADDRESS", getMAIL_ADDRESS());
		attributes.put("OTP", getOTP());
		attributes.put("MAIL_VERIFICATION", getMAIL_VERIFICATION());
		attributes.put("SMS_VERIFICATION", getSMS_VERIFICATION());
		attributes.put("CREATION_DATE_TIME", getCREATION_DATE_TIME());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long USER_OTP_ID = (Long)attributes.get("USER_OTP_ID");

		if (USER_OTP_ID != null) {
			setUSER_OTP_ID(USER_OTP_ID);
		}

		Long MOBILE_NO = (Long)attributes.get("MOBILE_NO");

		if (MOBILE_NO != null) {
			setMOBILE_NO(MOBILE_NO);
		}

		String MAIL_ADDRESS = (String)attributes.get("MAIL_ADDRESS");

		if (MAIL_ADDRESS != null) {
			setMAIL_ADDRESS(MAIL_ADDRESS);
		}

		Integer OTP = (Integer)attributes.get("OTP");

		if (OTP != null) {
			setOTP(OTP);
		}

		Integer MAIL_VERIFICATION = (Integer)attributes.get("MAIL_VERIFICATION");

		if (MAIL_VERIFICATION != null) {
			setMAIL_VERIFICATION(MAIL_VERIFICATION);
		}

		Integer SMS_VERIFICATION = (Integer)attributes.get("SMS_VERIFICATION");

		if (SMS_VERIFICATION != null) {
			setSMS_VERIFICATION(SMS_VERIFICATION);
		}

		Date CREATION_DATE_TIME = (Date)attributes.get("CREATION_DATE_TIME");

		if (CREATION_DATE_TIME != null) {
			setCREATION_DATE_TIME(CREATION_DATE_TIME);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getUSER_OTP_ID() {
		return _USER_OTP_ID;
	}

	@Override
	public void setUSER_OTP_ID(long USER_OTP_ID) {
		_columnBitmask |= USER_OTP_ID_COLUMN_BITMASK;

		if (!_setOriginalUSER_OTP_ID) {
			_setOriginalUSER_OTP_ID = true;

			_originalUSER_OTP_ID = _USER_OTP_ID;
		}

		_USER_OTP_ID = USER_OTP_ID;
	}

	public long getOriginalUSER_OTP_ID() {
		return _originalUSER_OTP_ID;
	}

	@JSON
	@Override
	public long getMOBILE_NO() {
		return _MOBILE_NO;
	}

	@Override
	public void setMOBILE_NO(long MOBILE_NO) {
		_columnBitmask |= MOBILE_NO_COLUMN_BITMASK;

		if (!_setOriginalMOBILE_NO) {
			_setOriginalMOBILE_NO = true;

			_originalMOBILE_NO = _MOBILE_NO;
		}

		_MOBILE_NO = MOBILE_NO;
	}

	public long getOriginalMOBILE_NO() {
		return _originalMOBILE_NO;
	}

	@JSON
	@Override
	public String getMAIL_ADDRESS() {
		if (_MAIL_ADDRESS == null) {
			return "";
		}
		else {
			return _MAIL_ADDRESS;
		}
	}

	@Override
	public void setMAIL_ADDRESS(String MAIL_ADDRESS) {
		_MAIL_ADDRESS = MAIL_ADDRESS;
	}

	@JSON
	@Override
	public int getOTP() {
		return _OTP;
	}

	@Override
	public void setOTP(int OTP) {
		_OTP = OTP;
	}

	@JSON
	@Override
	public int getMAIL_VERIFICATION() {
		return _MAIL_VERIFICATION;
	}

	@Override
	public void setMAIL_VERIFICATION(int MAIL_VERIFICATION) {
		_MAIL_VERIFICATION = MAIL_VERIFICATION;
	}

	@JSON
	@Override
	public int getSMS_VERIFICATION() {
		return _SMS_VERIFICATION;
	}

	@Override
	public void setSMS_VERIFICATION(int SMS_VERIFICATION) {
		_SMS_VERIFICATION = SMS_VERIFICATION;
	}

	@JSON
	@Override
	public Date getCREATION_DATE_TIME() {
		return _CREATION_DATE_TIME;
	}

	@Override
	public void setCREATION_DATE_TIME(Date CREATION_DATE_TIME) {
		_CREATION_DATE_TIME = CREATION_DATE_TIME;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			UserOTPRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserOTPRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (UserOTPRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserOTPRegistrationImpl userOTPRegistrationImpl = new UserOTPRegistrationImpl();

		userOTPRegistrationImpl.setUuid(getUuid());
		userOTPRegistrationImpl.setUSER_OTP_ID(getUSER_OTP_ID());
		userOTPRegistrationImpl.setMOBILE_NO(getMOBILE_NO());
		userOTPRegistrationImpl.setMAIL_ADDRESS(getMAIL_ADDRESS());
		userOTPRegistrationImpl.setOTP(getOTP());
		userOTPRegistrationImpl.setMAIL_VERIFICATION(getMAIL_VERIFICATION());
		userOTPRegistrationImpl.setSMS_VERIFICATION(getSMS_VERIFICATION());
		userOTPRegistrationImpl.setCREATION_DATE_TIME(getCREATION_DATE_TIME());

		userOTPRegistrationImpl.resetOriginalValues();

		return userOTPRegistrationImpl;
	}

	@Override
	public int compareTo(UserOTPRegistration userOTPRegistration) {
		long primaryKey = userOTPRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserOTPRegistration)) {
			return false;
		}

		UserOTPRegistration userOTPRegistration = (UserOTPRegistration)obj;

		long primaryKey = userOTPRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		UserOTPRegistrationModelImpl userOTPRegistrationModelImpl = this;

		userOTPRegistrationModelImpl._originalUuid = userOTPRegistrationModelImpl._uuid;

		userOTPRegistrationModelImpl._originalUSER_OTP_ID = userOTPRegistrationModelImpl._USER_OTP_ID;

		userOTPRegistrationModelImpl._setOriginalUSER_OTP_ID = false;

		userOTPRegistrationModelImpl._originalMOBILE_NO = userOTPRegistrationModelImpl._MOBILE_NO;

		userOTPRegistrationModelImpl._setOriginalMOBILE_NO = false;

		userOTPRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserOTPRegistration> toCacheModel() {
		UserOTPRegistrationCacheModel userOTPRegistrationCacheModel = new UserOTPRegistrationCacheModel();

		userOTPRegistrationCacheModel.uuid = getUuid();

		String uuid = userOTPRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userOTPRegistrationCacheModel.uuid = null;
		}

		userOTPRegistrationCacheModel.USER_OTP_ID = getUSER_OTP_ID();

		userOTPRegistrationCacheModel.MOBILE_NO = getMOBILE_NO();

		userOTPRegistrationCacheModel.MAIL_ADDRESS = getMAIL_ADDRESS();

		String MAIL_ADDRESS = userOTPRegistrationCacheModel.MAIL_ADDRESS;

		if ((MAIL_ADDRESS != null) && (MAIL_ADDRESS.length() == 0)) {
			userOTPRegistrationCacheModel.MAIL_ADDRESS = null;
		}

		userOTPRegistrationCacheModel.OTP = getOTP();

		userOTPRegistrationCacheModel.MAIL_VERIFICATION = getMAIL_VERIFICATION();

		userOTPRegistrationCacheModel.SMS_VERIFICATION = getSMS_VERIFICATION();

		Date CREATION_DATE_TIME = getCREATION_DATE_TIME();

		if (CREATION_DATE_TIME != null) {
			userOTPRegistrationCacheModel.CREATION_DATE_TIME = CREATION_DATE_TIME.getTime();
		}
		else {
			userOTPRegistrationCacheModel.CREATION_DATE_TIME = Long.MIN_VALUE;
		}

		return userOTPRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", USER_OTP_ID=");
		sb.append(getUSER_OTP_ID());
		sb.append(", MOBILE_NO=");
		sb.append(getMOBILE_NO());
		sb.append(", MAIL_ADDRESS=");
		sb.append(getMAIL_ADDRESS());
		sb.append(", OTP=");
		sb.append(getOTP());
		sb.append(", MAIL_VERIFICATION=");
		sb.append(getMAIL_VERIFICATION());
		sb.append(", SMS_VERIFICATION=");
		sb.append(getSMS_VERIFICATION());
		sb.append(", CREATION_DATE_TIME=");
		sb.append(getCREATION_DATE_TIME());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("com.crowd.funding.database.model.UserOTPRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>USER_OTP_ID</column-name><column-value><![CDATA[");
		sb.append(getUSER_OTP_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MOBILE_NO</column-name><column-value><![CDATA[");
		sb.append(getMOBILE_NO());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MAIL_ADDRESS</column-name><column-value><![CDATA[");
		sb.append(getMAIL_ADDRESS());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>OTP</column-name><column-value><![CDATA[");
		sb.append(getOTP());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>MAIL_VERIFICATION</column-name><column-value><![CDATA[");
		sb.append(getMAIL_VERIFICATION());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>SMS_VERIFICATION</column-name><column-value><![CDATA[");
		sb.append(getSMS_VERIFICATION());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CREATION_DATE_TIME</column-name><column-value><![CDATA[");
		sb.append(getCREATION_DATE_TIME());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = UserOTPRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			UserOTPRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _USER_OTP_ID;
	private long _originalUSER_OTP_ID;
	private boolean _setOriginalUSER_OTP_ID;
	private long _MOBILE_NO;
	private long _originalMOBILE_NO;
	private boolean _setOriginalMOBILE_NO;
	private String _MAIL_ADDRESS;
	private int _OTP;
	private int _MAIL_VERIFICATION;
	private int _SMS_VERIFICATION;
	private Date _CREATION_DATE_TIME;
	private long _columnBitmask;
	private UserOTPRegistration _escapedModel;
}