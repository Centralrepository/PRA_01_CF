/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.crowd.funding.database.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.crowd.funding.database.model.ProjectRegistration;
import com.crowd.funding.database.model.ProjectRegistrationModel;
import com.crowd.funding.database.model.ProjectRegistrationSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProjectRegistration service. Represents a row in the &quot;cf_project_master&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectRegistrationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectRegistrationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProjectRegistrationImpl
 * @see ProjectRegistration
 * @see ProjectRegistrationModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProjectRegistrationModelImpl extends BaseModelImpl<ProjectRegistration>
	implements ProjectRegistrationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project registration model instance should use the {@link ProjectRegistration} interface instead.
	 */
	public static final String TABLE_NAME = "cf_project_master";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "PROJECT_ID", Types.BIGINT },
			{ "USER_ID", Types.BIGINT },
			{ "BENIFICIARY_ID", Types.BIGINT },
			{ "TITLE", Types.VARCHAR },
			{ "DESCRIPTION", Types.VARCHAR },
			{ "REQUIRED_FUND_AMOUNT", Types.FLOAT },
			{ "CREATION_DATE", Types.TIMESTAMP },
			{ "END_DATE", Types.TIMESTAMP },
			{ "STATUS", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("PROJECT_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("USER_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("BENIFICIARY_ID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("TITLE", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DESCRIPTION", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("REQUIRED_FUND_AMOUNT", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("CREATION_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("END_DATE", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("STATUS", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table cf_project_master (uuid_ VARCHAR(75) null,PROJECT_ID LONG not null primary key,USER_ID LONG,BENIFICIARY_ID LONG,TITLE TEXT null,DESCRIPTION TEXT null,REQUIRED_FUND_AMOUNT DOUBLE,CREATION_DATE DATE null,END_DATE DATE null,STATUS INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table cf_project_master";
	public static final String ORDER_BY_JPQL = " ORDER BY projectRegistration.PROJECT_ID ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cf_project_master.PROJECT_ID ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.crowd.funding.database.model.ProjectRegistration"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.crowd.funding.database.model.ProjectRegistration"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.crowd.funding.database.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.crowd.funding.database.model.ProjectRegistration"),
			true);
	public static final long PROJECT_ID_COLUMN_BITMASK = 1L;
	public static final long STATUS_COLUMN_BITMASK = 2L;
	public static final long USER_ID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProjectRegistration toModel(ProjectRegistrationSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProjectRegistration model = new ProjectRegistrationImpl();

		model.setUuid(soapModel.getUuid());
		model.setPROJECT_ID(soapModel.getPROJECT_ID());
		model.setUSER_ID(soapModel.getUSER_ID());
		model.setBENIFICIARY_ID(soapModel.getBENIFICIARY_ID());
		model.setTITLE(soapModel.getTITLE());
		model.setDESCRIPTION(soapModel.getDESCRIPTION());
		model.setREQUIRED_FUND_AMOUNT(soapModel.getREQUIRED_FUND_AMOUNT());
		model.setCREATION_DATE(soapModel.getCREATION_DATE());
		model.setEND_DATE(soapModel.getEND_DATE());
		model.setSTATUS(soapModel.getSTATUS());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProjectRegistration> toModels(
		ProjectRegistrationSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProjectRegistration> models = new ArrayList<ProjectRegistration>(soapModels.length);

		for (ProjectRegistrationSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.crowd.funding.database.service.util.ServiceProps.get(
				"lock.expiration.time.com.crowd.funding.database.model.ProjectRegistration"));

	public ProjectRegistrationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _PROJECT_ID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPROJECT_ID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _PROJECT_ID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectRegistration.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectRegistration.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("PROJECT_ID", getPROJECT_ID());
		attributes.put("USER_ID", getUSER_ID());
		attributes.put("BENIFICIARY_ID", getBENIFICIARY_ID());
		attributes.put("TITLE", getTITLE());
		attributes.put("DESCRIPTION", getDESCRIPTION());
		attributes.put("REQUIRED_FUND_AMOUNT", getREQUIRED_FUND_AMOUNT());
		attributes.put("CREATION_DATE", getCREATION_DATE());
		attributes.put("END_DATE", getEND_DATE());
		attributes.put("STATUS", getSTATUS());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long PROJECT_ID = (Long)attributes.get("PROJECT_ID");

		if (PROJECT_ID != null) {
			setPROJECT_ID(PROJECT_ID);
		}

		Long USER_ID = (Long)attributes.get("USER_ID");

		if (USER_ID != null) {
			setUSER_ID(USER_ID);
		}

		Long BENIFICIARY_ID = (Long)attributes.get("BENIFICIARY_ID");

		if (BENIFICIARY_ID != null) {
			setBENIFICIARY_ID(BENIFICIARY_ID);
		}

		String TITLE = (String)attributes.get("TITLE");

		if (TITLE != null) {
			setTITLE(TITLE);
		}

		String DESCRIPTION = (String)attributes.get("DESCRIPTION");

		if (DESCRIPTION != null) {
			setDESCRIPTION(DESCRIPTION);
		}

		Float REQUIRED_FUND_AMOUNT = (Float)attributes.get(
				"REQUIRED_FUND_AMOUNT");

		if (REQUIRED_FUND_AMOUNT != null) {
			setREQUIRED_FUND_AMOUNT(REQUIRED_FUND_AMOUNT);
		}

		Date CREATION_DATE = (Date)attributes.get("CREATION_DATE");

		if (CREATION_DATE != null) {
			setCREATION_DATE(CREATION_DATE);
		}

		Date END_DATE = (Date)attributes.get("END_DATE");

		if (END_DATE != null) {
			setEND_DATE(END_DATE);
		}

		Integer STATUS = (Integer)attributes.get("STATUS");

		if (STATUS != null) {
			setSTATUS(STATUS);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getPROJECT_ID() {
		return _PROJECT_ID;
	}

	@Override
	public void setPROJECT_ID(long PROJECT_ID) {
		_columnBitmask |= PROJECT_ID_COLUMN_BITMASK;

		if (!_setOriginalPROJECT_ID) {
			_setOriginalPROJECT_ID = true;

			_originalPROJECT_ID = _PROJECT_ID;
		}

		_PROJECT_ID = PROJECT_ID;
	}

	public long getOriginalPROJECT_ID() {
		return _originalPROJECT_ID;
	}

	@JSON
	@Override
	public long getUSER_ID() {
		return _USER_ID;
	}

	@Override
	public void setUSER_ID(long USER_ID) {
		_columnBitmask |= USER_ID_COLUMN_BITMASK;

		if (!_setOriginalUSER_ID) {
			_setOriginalUSER_ID = true;

			_originalUSER_ID = _USER_ID;
		}

		_USER_ID = USER_ID;
	}

	public long getOriginalUSER_ID() {
		return _originalUSER_ID;
	}

	@JSON
	@Override
	public long getBENIFICIARY_ID() {
		return _BENIFICIARY_ID;
	}

	@Override
	public void setBENIFICIARY_ID(long BENIFICIARY_ID) {
		_BENIFICIARY_ID = BENIFICIARY_ID;
	}

	@JSON
	@Override
	public String getTITLE() {
		if (_TITLE == null) {
			return "";
		}
		else {
			return _TITLE;
		}
	}

	@Override
	public void setTITLE(String TITLE) {
		_TITLE = TITLE;
	}

	@JSON
	@Override
	public String getDESCRIPTION() {
		if (_DESCRIPTION == null) {
			return "";
		}
		else {
			return _DESCRIPTION;
		}
	}

	@Override
	public void setDESCRIPTION(String DESCRIPTION) {
		_DESCRIPTION = DESCRIPTION;
	}

	@JSON
	@Override
	public float getREQUIRED_FUND_AMOUNT() {
		return _REQUIRED_FUND_AMOUNT;
	}

	@Override
	public void setREQUIRED_FUND_AMOUNT(float REQUIRED_FUND_AMOUNT) {
		_REQUIRED_FUND_AMOUNT = REQUIRED_FUND_AMOUNT;
	}

	@JSON
	@Override
	public Date getCREATION_DATE() {
		return _CREATION_DATE;
	}

	@Override
	public void setCREATION_DATE(Date CREATION_DATE) {
		_CREATION_DATE = CREATION_DATE;
	}

	@JSON
	@Override
	public Date getEND_DATE() {
		return _END_DATE;
	}

	@Override
	public void setEND_DATE(Date END_DATE) {
		_END_DATE = END_DATE;
	}

	@JSON
	@Override
	public int getSTATUS() {
		return _STATUS;
	}

	@Override
	public void setSTATUS(int STATUS) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalSTATUS) {
			_setOriginalSTATUS = true;

			_originalSTATUS = _STATUS;
		}

		_STATUS = STATUS;
	}

	public int getOriginalSTATUS() {
		return _originalSTATUS;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ProjectRegistration.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProjectRegistration toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectRegistration)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectRegistrationImpl projectRegistrationImpl = new ProjectRegistrationImpl();

		projectRegistrationImpl.setUuid(getUuid());
		projectRegistrationImpl.setPROJECT_ID(getPROJECT_ID());
		projectRegistrationImpl.setUSER_ID(getUSER_ID());
		projectRegistrationImpl.setBENIFICIARY_ID(getBENIFICIARY_ID());
		projectRegistrationImpl.setTITLE(getTITLE());
		projectRegistrationImpl.setDESCRIPTION(getDESCRIPTION());
		projectRegistrationImpl.setREQUIRED_FUND_AMOUNT(getREQUIRED_FUND_AMOUNT());
		projectRegistrationImpl.setCREATION_DATE(getCREATION_DATE());
		projectRegistrationImpl.setEND_DATE(getEND_DATE());
		projectRegistrationImpl.setSTATUS(getSTATUS());

		projectRegistrationImpl.resetOriginalValues();

		return projectRegistrationImpl;
	}

	@Override
	public int compareTo(ProjectRegistration projectRegistration) {
		long primaryKey = projectRegistration.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectRegistration)) {
			return false;
		}

		ProjectRegistration projectRegistration = (ProjectRegistration)obj;

		long primaryKey = projectRegistration.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProjectRegistrationModelImpl projectRegistrationModelImpl = this;

		projectRegistrationModelImpl._originalUuid = projectRegistrationModelImpl._uuid;

		projectRegistrationModelImpl._originalPROJECT_ID = projectRegistrationModelImpl._PROJECT_ID;

		projectRegistrationModelImpl._setOriginalPROJECT_ID = false;

		projectRegistrationModelImpl._originalUSER_ID = projectRegistrationModelImpl._USER_ID;

		projectRegistrationModelImpl._setOriginalUSER_ID = false;

		projectRegistrationModelImpl._originalSTATUS = projectRegistrationModelImpl._STATUS;

		projectRegistrationModelImpl._setOriginalSTATUS = false;

		projectRegistrationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProjectRegistration> toCacheModel() {
		ProjectRegistrationCacheModel projectRegistrationCacheModel = new ProjectRegistrationCacheModel();

		projectRegistrationCacheModel.uuid = getUuid();

		String uuid = projectRegistrationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			projectRegistrationCacheModel.uuid = null;
		}

		projectRegistrationCacheModel.PROJECT_ID = getPROJECT_ID();

		projectRegistrationCacheModel.USER_ID = getUSER_ID();

		projectRegistrationCacheModel.BENIFICIARY_ID = getBENIFICIARY_ID();

		projectRegistrationCacheModel.TITLE = getTITLE();

		String TITLE = projectRegistrationCacheModel.TITLE;

		if ((TITLE != null) && (TITLE.length() == 0)) {
			projectRegistrationCacheModel.TITLE = null;
		}

		projectRegistrationCacheModel.DESCRIPTION = getDESCRIPTION();

		String DESCRIPTION = projectRegistrationCacheModel.DESCRIPTION;

		if ((DESCRIPTION != null) && (DESCRIPTION.length() == 0)) {
			projectRegistrationCacheModel.DESCRIPTION = null;
		}

		projectRegistrationCacheModel.REQUIRED_FUND_AMOUNT = getREQUIRED_FUND_AMOUNT();

		Date CREATION_DATE = getCREATION_DATE();

		if (CREATION_DATE != null) {
			projectRegistrationCacheModel.CREATION_DATE = CREATION_DATE.getTime();
		}
		else {
			projectRegistrationCacheModel.CREATION_DATE = Long.MIN_VALUE;
		}

		Date END_DATE = getEND_DATE();

		if (END_DATE != null) {
			projectRegistrationCacheModel.END_DATE = END_DATE.getTime();
		}
		else {
			projectRegistrationCacheModel.END_DATE = Long.MIN_VALUE;
		}

		projectRegistrationCacheModel.STATUS = getSTATUS();

		return projectRegistrationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(21);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", PROJECT_ID=");
		sb.append(getPROJECT_ID());
		sb.append(", USER_ID=");
		sb.append(getUSER_ID());
		sb.append(", BENIFICIARY_ID=");
		sb.append(getBENIFICIARY_ID());
		sb.append(", TITLE=");
		sb.append(getTITLE());
		sb.append(", DESCRIPTION=");
		sb.append(getDESCRIPTION());
		sb.append(", REQUIRED_FUND_AMOUNT=");
		sb.append(getREQUIRED_FUND_AMOUNT());
		sb.append(", CREATION_DATE=");
		sb.append(getCREATION_DATE());
		sb.append(", END_DATE=");
		sb.append(getEND_DATE());
		sb.append(", STATUS=");
		sb.append(getSTATUS());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(34);

		sb.append("<model><model-name>");
		sb.append("com.crowd.funding.database.model.ProjectRegistration");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>PROJECT_ID</column-name><column-value><![CDATA[");
		sb.append(getPROJECT_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>USER_ID</column-name><column-value><![CDATA[");
		sb.append(getUSER_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>BENIFICIARY_ID</column-name><column-value><![CDATA[");
		sb.append(getBENIFICIARY_ID());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>TITLE</column-name><column-value><![CDATA[");
		sb.append(getTITLE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DESCRIPTION</column-name><column-value><![CDATA[");
		sb.append(getDESCRIPTION());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>REQUIRED_FUND_AMOUNT</column-name><column-value><![CDATA[");
		sb.append(getREQUIRED_FUND_AMOUNT());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>CREATION_DATE</column-name><column-value><![CDATA[");
		sb.append(getCREATION_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>END_DATE</column-name><column-value><![CDATA[");
		sb.append(getEND_DATE());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>STATUS</column-name><column-value><![CDATA[");
		sb.append(getSTATUS());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProjectRegistration.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectRegistration.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _PROJECT_ID;
	private long _originalPROJECT_ID;
	private boolean _setOriginalPROJECT_ID;
	private long _USER_ID;
	private long _originalUSER_ID;
	private boolean _setOriginalUSER_ID;
	private long _BENIFICIARY_ID;
	private String _TITLE;
	private String _DESCRIPTION;
	private float _REQUIRED_FUND_AMOUNT;
	private Date _CREATION_DATE;
	private Date _END_DATE;
	private int _STATUS;
	private int _originalSTATUS;
	private boolean _setOriginalSTATUS;
	private long _columnBitmask;
	private ProjectRegistration _escapedModel;
}